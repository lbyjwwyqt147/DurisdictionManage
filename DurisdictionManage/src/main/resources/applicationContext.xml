<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- 引入配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
    <!-- 数据源配置公共部分 -->
    <bean id="baseDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
        <!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}"></property>
		 <!-- 自动清除无用连接 -->
        <property name="removeAbandoned">
            <value>true</value>
        </property>
		 <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout">
           <value>180</value>
        </property>
        <!-- 设置在自动回收超时连接的时候打印连接的超时错误  -->
        <property name="logAbandoned" value="true"></property>
    </bean>
    
    <!-- 配置主表 只写数据源 -->
	<bean id="masterDataSource" parent="baseDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${master.jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
	</bean>
	
     <!-- 配置从表 只读数据源 -->
	<bean id="slaveDataSource" parent="baseDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${master.jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
    

    <!-- 定义数据源，使用自己实现的数据源 -->  
    <bean id="dataSource" class="pers.liujunyi.tally.datasource.DynamicDataSource">  
        <!-- 设置多个数据源 -->  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <!-- 这个key需要和程序中的key一致 -->  
                <!-- 主库 -->
                <entry key="master" value-ref="masterDataSource"/> 
                <!-- 从库 --> 
                <entry key="slave" value-ref="slaveDataSource"/>  
            </map>  
        </property>  
        <!-- 设置默认的数据源，这里默认走写库 -->  
        <property name="defaultTargetDataSource" ref="masterDataSource"/>  
    </bean>
    
    <!-- 数据源事务管理 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
   
   <!-- 事务管理 属性 -->
    <tx:advice id="transactionAdvice" transaction-manager="txManager">
      <tx:attributes>
            <!-- 定义查询方法只读(操作从库) -->
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="search*" propagation="REQUIRED" read-only="true"/>
            
            
            <!-- 操作主库(写库) -->
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            
            
            <!-- 其他方法使用默认策略 -->
            <tx:method name="*"/>
       </tx:attributes>
    </tx:advice>

    <!-- 定义数据源AOP切面处理器 -->  
    <bean class="pers.liujunyi.tally.aop.DataSourceAspect" id="dataSourceAspect">  
        <!-- 指定事务策略 -->  
        <property name="txAdvice" ref="transactionAdvice"/>  
        <!-- 指定slave方法的前缀（非必须） -->  
        <property name="slaveMethodStart" value="query,find,get,select,load,search"/>  
    </bean>

    <!-- 自动扫描dao service组件，需要把controller去掉，否则影响事务管理 -->  
    <context:component-scan base-package="pers.liujunyi.tally">
        <context:exclude-filter type="regex"  expression="pers.liujunyi.tally.controller" />
        <!--  <context:exclude-filter type="regex"  expression="pers.liujunyi.tally.util" />  --> 
   </context:component-scan>  
   
    <!-- 配置切面 -->
    <aop:config>
        <!-- 定义切面，所有的service的所有方法 -->  
        <aop:pointcut expression="execution(* pers.liujunyi..*.service..*.*(..))" id="txPointcut"/>
        <!-- 应用事务策略到Service切面 -->  
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="txPointcut"/>
        <!-- 将切面应用到自定义的切面处理器上(动态切换数据源AOP)，-9999保证该切面优先级最高执行 -->  
        <aop:aspect ref="dataSourceAspect" order="-9999">  
            <aop:before method="before" pointcut-ref="txPointcut" />  
        </aop:aspect>  
    </aop:config>
    
    <aop:aspectj-autoproxy proxy-target-class="true"/>  
    <bean class="pers.liujunyi.tally.aop.LogAspect" />  
    
    <!-- Spring整合mybatis -->
   <bean id="lazySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="dataSource"/>  
	    <property name="configLocation" value="classpath:mybatis-config.xml"/> 
	    <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径。  
	         *是个通配符，代表所有的文件，**代表所有目录下 -->  
	  <!--  <property name="mapperLocations" value="classpath:sqlMapperXml/*.xml" />   -->
    </bean> 
 
    <!-- MyBatis 动态实现  -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <!--对dao接口动态实现，需要知道接口在哪  -->
        <property name="basePackage" value="pers.liujunyi..*.mapper"/>
    </bean>
</beans>